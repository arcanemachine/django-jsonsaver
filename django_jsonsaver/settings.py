"""Generated by 'django-admin startproject' using Django 3.1.6."""
import sys

from pathlib import Path

from django_jsonsaver import keys, server_config


BASE_DIR = Path(__file__).resolve().parent.parent
DEFAULT_AUTO_FIELD = 'django.db.models.AutoField' 

SECRET_KEY = keys.SECRET_KEY
DEBUG = server_config.DEBUG

ALLOWED_HOSTS = ['*']
ROOT_URLCONF = 'django_jsonsaver.urls'
WSGI_APPLICATION = 'django_jsonsaver.wsgi.application'

LANGUAGE_CODE = 'en-us'
TIME_ZONE = server_config.TIME_ZONE
USE_I18N = True
USE_L10N = True
USE_TZ = True

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # local
    'stores.apps.StoresConfig',
    'users.apps.UsersConfig',
    # third-party
    'captcha',
    'corsheaders',
    'crispy_forms',
    'drf_spectacular',
    'rest_framework',
    'rest_framework.authtoken',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware']

TEMPLATES = [{
    'BACKEND': 'django.template.backends.django.DjangoTemplates',
    'DIRS': [server_config.TEMPLATE_DIRS],
    'APP_DIRS': True,
    'OPTIONS': {
        'context_processors': [
            'django.template.context_processors.debug',
            'django.template.context_processors.request',
            'django.contrib.auth.context_processors.auth',
            'django.contrib.messages.context_processors.messages',
            'django_jsonsaver.context_processors.constants']}}]

if server_config.USE_DATABASE == 'sqlite':
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3'}}
elif server_config.USE_DATABASE == 'postgres':
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql_psycopg2',
            'NAME': keys.DATABASE_NAME,
            'USER': keys.DATABASE_USER,
            'PASSWORD': keys.DATABASE_PASSWORD,
            'HOST': 'localhost',
            'PORT': ''}}

PV_PREFIX = 'django.contrib.auth.password_validation'
AUTH_PASSWORD_VALIDATORS = [
    {'NAME': f'{PV_PREFIX}.UserAttributeSimilarityValidator'},
    {'NAME': f'{PV_PREFIX}.MinimumLengthValidator'},
    {'NAME': f'{PV_PREFIX}.CommonPasswordValidator'},
    {'NAME': f'{PV_PREFIX}.NumericPasswordValidator'}]


# authentication
ABSOLUTE_URL_OVERRIDES = {'auth.user': lambda n: 'users:user_detail_me'}
LOGIN_URL = 'users:login'
LOGIN_REDIRECT_URL = 'users:user_detail_me'
LOGOUT_REDIRECT_URL = 'project_root'

# captcha
CAPTCHA_CHALLENGE_FUNCT = 'captcha.helpers.random_char_challenge'
CAPTCHA_LENGTH = 5
CAPTCHA_NOISE_FUNCTIONS = ('captcha.helpers.noise_dots',)
CAPTCHA_LETTER_ROTATION = (-15, 20)
CAPTCHA_TIMEOUT = 3

if 'test' in sys.argv or 'test_coverage' in sys.argv or server_config.DEBUG:
    CAPTCHA_TEST_MODE = True

# celery
CELERY_BROKER_URL = server_config.CELERY_BROKER_URL
CELERY_RESULT_BACKEND = server_config.CELERY_RESULT_BACKEND
CELERY_ACCEPT_CONTENT = ['application/json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'

# corsheaders
CORS_ALLOW_ALL_ORIGINS = server_config.CORS_ALLOW_ALL_ORIGINS

# crispy_forms
CRISPY_TEMPLATE_PACK = 'bootstrap4'

# drf_spectacular
SPECTACULAR_SETTINGS = {
    'TITLE': server_config.PROJECT_NAME,
    'VERSION': '0.0.l',
}

# email
SERVER_EMAIL = server_config.SERVER_EMAIL
EMAIL_BACKEND = server_config.EMAIL_BACKEND

AWS_ACCESS_KEY_ID = keys.AWS_ACCESS_KEY_ID
AWS_SECRET_ACCESS_KEY = keys.AWS_SECRET_ACCESS_KEY
AWS_SES_AUTO_THROTTLE = 0.5
AWS_SES_REGION_NAME = 'us-east-2'
AWS_SES_REGION_ENDPOINT = 'email.us-east-2.amazonaws.com'
EMAIL_HOST_USER = keys.EMAIL_HOST_USER
EMAIL_HOST_PASSWORD = keys.EMAIL_HOST_PASSWORD

# rest_framework
REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
        ],
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.TokenAuthentication',
    ],
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
        'rest_framework.renderers.BrowsableAPIRenderer'
    ] if server_config.BROWSABLE_API else [
        'rest_framework.renderers.JSONRenderer'
    ],
    'DEFAULT_THROTTLE_CLASSES': [
        'rest_framework.throttling.AnonRateThrottle',
        'rest_framework.throttling.UserRateThrottle'
    ],
    'DEFAULT_THROTTLE_RATES': {
        'anon': server_config.THROTTLE_RATE_ANON,
        'user': server_config.THROTTLE_RATE_USER,
    },
    'TEST_REQUEST_DEFAULT_FORMAT': 'json',
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
}

# static
STATIC_URL = '/static/'
STATICFILES_DIRS = server_config.STATICFILES_DIRS
STATIC_ROOT = server_config.STATIC_ROOT
